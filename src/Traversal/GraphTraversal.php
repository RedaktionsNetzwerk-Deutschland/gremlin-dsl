<?php

/**
 * This is an autogenerated file. Changes will be lost on next generation.
 * @phpcs:disable PSR1.Methods.CamelCapsMethodName.NotCamelCaps
 * @phpcs:disable Generic.Files.LineLength.TooLong
 */

declare(strict_types=1);

namespace SpecialWeb\GremlinDSL\Traversal;

use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\AddEStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\AddVStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\AggregateStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\AndStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\AsStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\BarrierStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\BothEStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\BothStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\BothVStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\BranchStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ByStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\CallStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\CapStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ChooseStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\CoalesceStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\CoinStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ConnectedComponentStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ConstantStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\CountStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\CyclicPathStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\DedupStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\DropStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ElementMapStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ElementStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\EmitStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\FailStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\FilterStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\FlatMapStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\FoldStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\FromStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\GroupCountStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\GroupStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\HasIdStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\HasKeyStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\HasLabelStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\HasNotStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\HasStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\HasValueStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\IdStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\IdentityStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\InEStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\InStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\InVStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\IndexStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\InjectStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\IsStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\KeyStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\LabelStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\LimitStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\LocalStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\LoopsStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\MapStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\MatchStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\MathStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\MaxStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\MeanStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\MergeEStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\MergeVStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\MinStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\NoneStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\NotStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\OptionStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\OptionalStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\OrStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\OrderStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\OtherVStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\OutEStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\OutStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\OutVStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\PageRankStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\PathStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\PeerPressureStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ProfileStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ProgramStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ProjectStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\PropertiesStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\PropertyMapStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\PropertyStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\RangeStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ReadStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\RepeatStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\SackStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\SampleStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\SelectStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ShortestPathStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\SideEffectStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\SimplePathStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\SkipStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\StoreStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\SubgraphStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\SumStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\TailStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\TimeLimitStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\TimesStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ToEStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ToStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ToVStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\TreeStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\UnfoldStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\UnionStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\UntilStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\VStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ValueMapStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ValueStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\ValuesStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\WhereStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\WithStep;
use SpecialWeb\GremlinDSL\Traversal\Steps\Generated\WriteStep;

/**
 * @see https://tinkerpop.apache.org/docs/current/reference/
 * @codeCoverageIgnore
 */
class GraphTraversal extends AbstractGraphTraversal
{
    /**
     * The "V" step.
     *
     * @param mixed[] $vertexIdsOrElements,...
     * @return GraphTraversal
     */
    public function V(...$vertexIdsOrElements): GraphTraversal
    {
        $step = new VStep(...$vertexIdsOrElements);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "addE" step.
     *
     * @param mixed $args being any of:
     *                    - string edgeLabel
     *                    - GraphTraversalInterface edgeLabelTraversal
     * @return GraphTraversal
     */
    public function addE(...$args): GraphTraversal
    {
        $step = new AddEStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "addV" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - string vertexLabel
     *                    - GraphTraversalInterface vertexLabelTraversal
     * @return GraphTraversal
     */
    public function addV(...$args): GraphTraversal
    {
        $step = new AddVStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "aggregate" step.
     *
     * @param mixed $args being any of:
     *                    - mixed scope, string sideEffectKey
     *                    - string sideEffectKey
     * @return GraphTraversal
     */
    public function aggregate(...$args): GraphTraversal
    {
        $step = new AggregateStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "and" step.
     *
     * @param GraphTraversalInterface[] $andTraversals,...
     * @return GraphTraversal
     */
    public function and(GraphTraversalInterface ...$andTraversals): GraphTraversal
    {
        $step = new AndStep(...$andTraversals);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "as" step.
     *
     * @param string $stepLabel
     * @param string[] $stepLabels,...
     * @return GraphTraversal
     */
    public function as(string $stepLabel, string ...$stepLabels): GraphTraversal
    {
        $step = new AsStep($stepLabel, ...$stepLabels);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "barrier" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed barrierConsumer
     *                    - int maxBarrierSize
     * @return GraphTraversal
     */
    public function barrier(...$args): GraphTraversal
    {
        $step = new BarrierStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "both" step.
     *
     * @param string[] $edgeLabels,...
     * @return GraphTraversal
     */
    public function both(string ...$edgeLabels): GraphTraversal
    {
        $step = new BothStep(...$edgeLabels);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "bothE" step.
     *
     * @param string[] $edgeLabels,...
     * @return GraphTraversal
     */
    public function bothE(string ...$edgeLabels): GraphTraversal
    {
        $step = new BothEStep(...$edgeLabels);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "bothV" step.
     *
     * @return GraphTraversal
     */
    public function bothV(): GraphTraversal
    {
        $step = new BothVStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "branch" step.
     *
     * @param mixed $args being any of:
     *                    - mixed function
     *                    - GraphTraversalInterface branchTraversal
     * @return GraphTraversal
     */
    public function branch(...$args): GraphTraversal
    {
        $step = new BranchStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "by" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed comparator
     *                    - mixed function
     *                    - mixed function, mixed comparator
     *                    - mixed order
     *                    - string key
     *                    - string key, mixed comparator
     *                    - mixed token
     *                    - GraphTraversalInterface traversal
     *                    - GraphTraversalInterface traversal, mixed comparator
     * @return GraphTraversal
     */
    public function by(...$args): GraphTraversal
    {
        $step = new ByStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "call" step.
     *
     * @param mixed $args being any of:
     *                    - string service
     *                    - string service, mixed params
     *                    - string service, mixed params, GraphTraversalInterface childTraversal
     *                    - string service, GraphTraversalInterface childTraversal
     * @return GraphTraversal
     */
    public function call(...$args): GraphTraversal
    {
        $step = new CallStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "cap" step.
     *
     * @param string $sideEffectKey
     * @param string[] $sideEffectKeys,...
     * @return GraphTraversal
     */
    public function cap(string $sideEffectKey, string ...$sideEffectKeys): GraphTraversal
    {
        $step = new CapStep($sideEffectKey, ...$sideEffectKeys);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "choose" step.
     *
     * @param mixed $args being any of:
     *                    - mixed choiceFunction
     *                    - Predicates\PredicateInterface choosePredicate, GraphTraversalInterface trueChoice
     *                    - Predicates\PredicateInterface choosePredicate, GraphTraversalInterface trueChoice, GraphTraversalInterface falseChoice
     *                    - GraphTraversalInterface choiceTraversal
     *                    - GraphTraversalInterface traversalPredicate, GraphTraversalInterface trueChoice
     *                    - GraphTraversalInterface traversalPredicate, GraphTraversalInterface trueChoice, GraphTraversalInterface falseChoice
     * @return GraphTraversal
     */
    public function choose(...$args): GraphTraversal
    {
        $step = new ChooseStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "coalesce" step.
     *
     * @param GraphTraversalInterface[] $coalesceTraversals,...
     * @return GraphTraversal
     */
    public function coalesce(GraphTraversalInterface ...$coalesceTraversals): GraphTraversal
    {
        $step = new CoalesceStep(...$coalesceTraversals);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "coin" step.
     *
     * @param float $probability
     * @return GraphTraversal
     */
    public function coin(float $probability): GraphTraversal
    {
        $step = new CoinStep($probability);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "connectedComponent" step.
     *
     * @return GraphTraversal
     */
    public function connectedComponent(): GraphTraversal
    {
        $step = new ConnectedComponentStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "constant" step.
     *
     * @param mixed $e
     * @return GraphTraversal
     */
    public function constant($e): GraphTraversal
    {
        $step = new ConstantStep($e);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "count" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed scope
     * @return GraphTraversal
     */
    public function count(...$args): GraphTraversal
    {
        $step = new CountStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "cyclicPath" step.
     *
     * @return GraphTraversal
     */
    public function cyclicPath(): GraphTraversal
    {
        $step = new CyclicPathStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "dedup" step.
     *
     * @param mixed $args being any of:
     *                    - mixed scope, string dedupLabels
     *                    - string dedupLabels
     * @return GraphTraversal
     */
    public function dedup(...$args): GraphTraversal
    {
        $step = new DedupStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "drop" step.
     *
     * @return GraphTraversal
     */
    public function drop(): GraphTraversal
    {
        $step = new DropStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "element" step.
     *
     * @return GraphTraversal
     */
    public function element(): GraphTraversal
    {
        $step = new ElementStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "elementMap" step.
     *
     * @param string[] $propertyKeys,...
     * @return GraphTraversal
     */
    public function elementMap(string ...$propertyKeys): GraphTraversal
    {
        $step = new ElementMapStep(...$propertyKeys);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "emit" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - Predicates\PredicateInterface emitPredicate
     *                    - GraphTraversalInterface emitTraversal
     * @return GraphTraversal
     */
    public function emit(...$args): GraphTraversal
    {
        $step = new EmitStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "fail" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - string message
     * @return GraphTraversal
     */
    public function fail(...$args): GraphTraversal
    {
        $step = new FailStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "filter" step.
     *
     * @param mixed $args being any of:
     *                    - Predicates\PredicateInterface predicate
     *                    - GraphTraversalInterface filterTraversal
     * @return GraphTraversal
     */
    public function filter(...$args): GraphTraversal
    {
        $step = new FilterStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "flatMap" step.
     *
     * @param mixed $args being any of:
     *                    - mixed function
     *                    - GraphTraversalInterface flatMapTraversal
     * @return GraphTraversal
     */
    public function flatMap(...$args): GraphTraversal
    {
        $step = new FlatMapStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "fold" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed seed, mixed foldFunction
     * @return GraphTraversal
     */
    public function fold(...$args): GraphTraversal
    {
        $step = new FoldStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "from" step.
     *
     * @param mixed $args being any of:
     *                    - string fromStepLabel
     *                    - GraphTraversalInterface fromVertex
     *                    - mixed fromVertex
     * @return GraphTraversal
     */
    public function from(...$args): GraphTraversal
    {
        $step = new FromStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "group" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - string sideEffectKey
     * @return GraphTraversal
     */
    public function group(...$args): GraphTraversal
    {
        $step = new GroupStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "groupCount" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - string sideEffectKey
     * @return GraphTraversal
     */
    public function groupCount(...$args): GraphTraversal
    {
        $step = new GroupCountStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "has" step.
     *
     * @param mixed $args being any of:
     *                    - string propertyKey
     *                    - string propertyKey, mixed value
     *                    - string propertyKey, mixed predicate
     *                    - string label, string propertyKey, mixed value
     *                    - string label, string propertyKey, mixed predicate
     *                    - string propertyKey, GraphTraversalInterface propertyTraversal
     *                    - mixed accessor, mixed value
     *                    - mixed accessor, mixed predicate
     *                    - mixed accessor, GraphTraversalInterface propertyTraversal
     * @return GraphTraversal
     */
    public function has(...$args): GraphTraversal
    {
        $step = new HasStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "hasId" step.
     *
     * @param mixed $args being any of:
     *                    - mixed id, mixed otherIds
     *                    - mixed predicate
     * @return GraphTraversal
     */
    public function hasId(...$args): GraphTraversal
    {
        $step = new HasIdStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "hasKey" step.
     *
     * @param mixed $args being any of:
     *                    - mixed predicate
     *                    - string label, string otherLabels
     * @return GraphTraversal
     */
    public function hasKey(...$args): GraphTraversal
    {
        $step = new HasKeyStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "hasLabel" step.
     *
     * @param mixed $args being any of:
     *                    - mixed predicate
     *                    - string label, string otherLabels
     * @return GraphTraversal
     */
    public function hasLabel(...$args): GraphTraversal
    {
        $step = new HasLabelStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "hasNot" step.
     *
     * @param string $propertyKey
     * @return GraphTraversal
     */
    public function hasNot(string $propertyKey): GraphTraversal
    {
        $step = new HasNotStep($propertyKey);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "hasValue" step.
     *
     * @param mixed $args being any of:
     *                    - mixed value, mixed otherValues
     *                    - mixed predicate
     * @return GraphTraversal
     */
    public function hasValue(...$args): GraphTraversal
    {
        $step = new HasValueStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "id" step.
     *
     * @return GraphTraversal
     */
    public function id(): GraphTraversal
    {
        $step = new IdStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "identity" step.
     *
     * @return GraphTraversal
     */
    public function identity(): GraphTraversal
    {
        $step = new IdentityStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "in" step.
     *
     * @param string[] $edgeLabels,...
     * @return GraphTraversal
     */
    public function in(string ...$edgeLabels): GraphTraversal
    {
        $step = new InStep(...$edgeLabels);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "inE" step.
     *
     * @param string[] $edgeLabels,...
     * @return GraphTraversal
     */
    public function inE(string ...$edgeLabels): GraphTraversal
    {
        $step = new InEStep(...$edgeLabels);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "inV" step.
     *
     * @return GraphTraversal
     */
    public function inV(): GraphTraversal
    {
        $step = new InVStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "index" step.
     *
     * @return GraphTraversal
     */
    public function index(): GraphTraversal
    {
        $step = new IndexStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "inject" step.
     *
     * @param mixed[] $injections,...
     * @return GraphTraversal
     */
    public function inject(...$injections): GraphTraversal
    {
        $step = new InjectStep(...$injections);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "is" step.
     *
     * @param mixed $args being any of:
     *                    - mixed value
     *                    - mixed predicate
     * @return GraphTraversal
     */
    public function is(...$args): GraphTraversal
    {
        $step = new IsStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "key" step.
     *
     * @return GraphTraversal
     */
    public function key(): GraphTraversal
    {
        $step = new KeyStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "label" step.
     *
     * @return GraphTraversal
     */
    public function label(): GraphTraversal
    {
        $step = new LabelStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "limit" step.
     *
     * @param mixed $args being any of:
     *                    - mixed scope, int limit
     *                    - int limit
     * @return GraphTraversal
     */
    public function limit(...$args): GraphTraversal
    {
        $step = new LimitStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "local" step.
     *
     * @param GraphTraversalInterface $localTraversal
     * @return GraphTraversal
     */
    public function local(GraphTraversalInterface $localTraversal): GraphTraversal
    {
        $step = new LocalStep($localTraversal);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "loops" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - string loopName
     * @return GraphTraversal
     */
    public function loops(...$args): GraphTraversal
    {
        $step = new LoopsStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "map" step.
     *
     * @param mixed $args being any of:
     *                    - mixed function
     *                    - GraphTraversalInterface mapTraversal
     * @return GraphTraversal
     */
    public function map(...$args): GraphTraversal
    {
        $step = new MapStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "match" step.
     *
     * @param GraphTraversalInterface[] $matchTraversals,...
     * @return GraphTraversal
     */
    public function match(GraphTraversalInterface ...$matchTraversals): GraphTraversal
    {
        $step = new MatchStep(...$matchTraversals);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "math" step.
     *
     * @param string $expression
     * @return GraphTraversal
     */
    public function math(string $expression): GraphTraversal
    {
        $step = new MathStep($expression);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "max" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed scope
     * @return GraphTraversal
     */
    public function max(...$args): GraphTraversal
    {
        $step = new MaxStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "mean" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed scope
     * @return GraphTraversal
     */
    public function mean(...$args): GraphTraversal
    {
        $step = new MeanStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "mergeE" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed searchCreate
     *                    - GraphTraversalInterface searchCreate
     * @return GraphTraversal
     */
    public function mergeE(...$args): GraphTraversal
    {
        $step = new MergeEStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "mergeV" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed searchCreate
     *                    - GraphTraversalInterface searchCreate
     * @return GraphTraversal
     */
    public function mergeV(...$args): GraphTraversal
    {
        $step = new MergeVStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "min" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed scope
     * @return GraphTraversal
     */
    public function min(...$args): GraphTraversal
    {
        $step = new MinStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "none" step.
     *
     * @return GraphTraversal
     */
    public function none(): GraphTraversal
    {
        $step = new NoneStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "not" step.
     *
     * @param GraphTraversalInterface $notTraversal
     * @return GraphTraversal
     */
    public function not(GraphTraversalInterface $notTraversal): GraphTraversal
    {
        $step = new NotStep($notTraversal);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "option" step.
     *
     * @param mixed $args being any of:
     *                    - mixed token, mixed m
     *                    - mixed token, GraphTraversalInterface traversalOption
     *                    - GraphTraversalInterface traversalOption
     * @return GraphTraversal
     */
    public function option(...$args): GraphTraversal
    {
        $step = new OptionStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "optional" step.
     *
     * @param GraphTraversalInterface $optionalTraversal
     * @return GraphTraversal
     */
    public function optional(GraphTraversalInterface $optionalTraversal): GraphTraversal
    {
        $step = new OptionalStep($optionalTraversal);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "or" step.
     *
     * @param GraphTraversalInterface[] $orTraversals,...
     * @return GraphTraversal
     */
    public function or(GraphTraversalInterface ...$orTraversals): GraphTraversal
    {
        $step = new OrStep(...$orTraversals);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "order" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed scope
     * @return GraphTraversal
     */
    public function order(...$args): GraphTraversal
    {
        $step = new OrderStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "otherV" step.
     *
     * @return GraphTraversal
     */
    public function otherV(): GraphTraversal
    {
        $step = new OtherVStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "out" step.
     *
     * @param string[] $edgeLabels,...
     * @return GraphTraversal
     */
    public function out(string ...$edgeLabels): GraphTraversal
    {
        $step = new OutStep(...$edgeLabels);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "outE" step.
     *
     * @param string[] $edgeLabels,...
     * @return GraphTraversal
     */
    public function outE(string ...$edgeLabels): GraphTraversal
    {
        $step = new OutEStep(...$edgeLabels);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "outV" step.
     *
     * @return GraphTraversal
     */
    public function outV(): GraphTraversal
    {
        $step = new OutVStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "pageRank" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - float alpha
     * @return GraphTraversal
     */
    public function pageRank(...$args): GraphTraversal
    {
        $step = new PageRankStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "path" step.
     *
     * @return GraphTraversal
     */
    public function path(): GraphTraversal
    {
        $step = new PathStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "peerPressure" step.
     *
     * @return GraphTraversal
     */
    public function peerPressure(): GraphTraversal
    {
        $step = new PeerPressureStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "profile" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - string sideEffectKey
     * @return GraphTraversal
     */
    public function profile(...$args): GraphTraversal
    {
        $step = new ProfileStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "program" step.
     *
     * @param mixed $vertexProgram
     * @return GraphTraversal
     */
    public function program($vertexProgram): GraphTraversal
    {
        $step = new ProgramStep($vertexProgram);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "project" step.
     *
     * @param string $projectKey
     * @param string[] $otherProjectKeys,...
     * @return GraphTraversal
     */
    public function project(string $projectKey, string ...$otherProjectKeys): GraphTraversal
    {
        $step = new ProjectStep($projectKey, ...$otherProjectKeys);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "properties" step.
     *
     * @param string[] $propertyKeys,...
     * @return GraphTraversal
     */
    public function properties(string ...$propertyKeys): GraphTraversal
    {
        $step = new PropertiesStep(...$propertyKeys);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "property" step.
     *
     * @param mixed $args being any of:
     *                    - mixed cardinality, mixed key, mixed value, mixed keyValues
     *                    - mixed value
     *                    - mixed key, mixed value, mixed keyValues
     * @return GraphTraversal
     */
    public function property(...$args): GraphTraversal
    {
        $step = new PropertyStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "propertyMap" step.
     *
     * @param string[] $propertyKeys,...
     * @return GraphTraversal
     */
    public function propertyMap(string ...$propertyKeys): GraphTraversal
    {
        $step = new PropertyMapStep(...$propertyKeys);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "range" step.
     *
     * @param mixed $args being any of:
     *                    - mixed scope, int low, int high
     *                    - int low, int high
     * @return GraphTraversal
     */
    public function range(...$args): GraphTraversal
    {
        $step = new RangeStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "read" step.
     *
     * @return GraphTraversal
     */
    public function read(): GraphTraversal
    {
        $step = new ReadStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "repeat" step.
     *
     * @param mixed $args being any of:
     *                    - string loopName, GraphTraversalInterface repeatTraversal
     *                    - GraphTraversalInterface repeatTraversal
     * @return GraphTraversal
     */
    public function repeat(...$args): GraphTraversal
    {
        $step = new RepeatStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "sack" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed sackOperator
     * @return GraphTraversal
     */
    public function sack(...$args): GraphTraversal
    {
        $step = new SackStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "sample" step.
     *
     * @param mixed $args being any of:
     *                    - mixed scope, int amountToSample
     *                    - int amountToSample
     * @return GraphTraversal
     */
    public function sample(...$args): GraphTraversal
    {
        $step = new SampleStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "select" step.
     *
     * @param mixed $args being any of:
     *                    - mixed column
     *                    - mixed pop, string selectKey
     *                    - mixed pop, string selectKey1, string selectKey2, string otherSelectKeys
     *                    - mixed pop, GraphTraversalInterface keyTraversal
     *                    - string selectKey
     *                    - string selectKey1, string selectKey2, string otherSelectKeys
     *                    - GraphTraversalInterface keyTraversal
     * @return GraphTraversal
     */
    public function select(...$args): GraphTraversal
    {
        $step = new SelectStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "shortestPath" step.
     *
     * @return GraphTraversal
     */
    public function shortestPath(): GraphTraversal
    {
        $step = new ShortestPathStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "sideEffect" step.
     *
     * @param mixed $args being any of:
     *                    - mixed consumer
     *                    - GraphTraversalInterface sideEffectTraversal
     * @return GraphTraversal
     */
    public function sideEffect(...$args): GraphTraversal
    {
        $step = new SideEffectStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "simplePath" step.
     *
     * @return GraphTraversal
     */
    public function simplePath(): GraphTraversal
    {
        $step = new SimplePathStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "skip" step.
     *
     * @param mixed $args being any of:
     *                    - mixed scope, int skip
     *                    - int skip
     * @return GraphTraversal
     */
    public function skip(...$args): GraphTraversal
    {
        $step = new SkipStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "store" step.
     *
     * @param string $sideEffectKey
     * @return GraphTraversal
     */
    public function store(string $sideEffectKey): GraphTraversal
    {
        $step = new StoreStep($sideEffectKey);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "subgraph" step.
     *
     * @param string $sideEffectKey
     * @return GraphTraversal
     */
    public function subgraph(string $sideEffectKey): GraphTraversal
    {
        $step = new SubgraphStep($sideEffectKey);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "sum" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed scope
     * @return GraphTraversal
     */
    public function sum(...$args): GraphTraversal
    {
        $step = new SumStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "tail" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - mixed scope
     *                    - mixed scope, int limit
     *                    - int limit
     * @return GraphTraversal
     */
    public function tail(...$args): GraphTraversal
    {
        $step = new TailStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "timeLimit" step.
     *
     * @param int $timeLimit
     * @return GraphTraversal
     */
    public function timeLimit(int $timeLimit): GraphTraversal
    {
        $step = new TimeLimitStep($timeLimit);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "times" step.
     *
     * @param int $maxLoops
     * @return GraphTraversal
     */
    public function times(int $maxLoops): GraphTraversal
    {
        $step = new TimesStep($maxLoops);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "to" step.
     *
     * @param mixed $args being any of:
     *                    - mixed direction, string edgeLabels
     *                    - string toStepLabel
     *                    - GraphTraversalInterface toVertex
     *                    - mixed toVertex
     * @return GraphTraversal
     */
    public function to(...$args): GraphTraversal
    {
        $step = new ToStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "toE" step.
     *
     * @param mixed $direction
     * @param string[] $edgeLabels,...
     * @return GraphTraversal
     */
    public function toE($direction, string ...$edgeLabels): GraphTraversal
    {
        $step = new ToEStep($direction, ...$edgeLabels);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "toV" step.
     *
     * @param mixed $direction
     * @return GraphTraversal
     */
    public function toV($direction): GraphTraversal
    {
        $step = new ToVStep($direction);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "tree" step.
     *
     * @param mixed $args being any of:
     *                    - empty
     *                    - string sideEffectKey
     * @return GraphTraversal
     */
    public function tree(...$args): GraphTraversal
    {
        $step = new TreeStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "unfold" step.
     *
     * @return GraphTraversal
     */
    public function unfold(): GraphTraversal
    {
        $step = new UnfoldStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "union" step.
     *
     * @param GraphTraversalInterface[] $unionTraversals,...
     * @return GraphTraversal
     */
    public function union(GraphTraversalInterface ...$unionTraversals): GraphTraversal
    {
        $step = new UnionStep(...$unionTraversals);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "until" step.
     *
     * @param mixed $args being any of:
     *                    - Predicates\PredicateInterface untilPredicate
     *                    - GraphTraversalInterface untilTraversal
     * @return GraphTraversal
     */
    public function until(...$args): GraphTraversal
    {
        $step = new UntilStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "value" step.
     *
     * @return GraphTraversal
     */
    public function value(): GraphTraversal
    {
        $step = new ValueStep();
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "valueMap" step.
     *
     * @param mixed $args being any of:
     *                    - string propertyKeys
     *                    - mixed includeTokens, string propertyKeys
     * @return GraphTraversal
     */
    public function valueMap(...$args): GraphTraversal
    {
        $step = new ValueMapStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "values" step.
     *
     * @param string[] $propertyKeys,...
     * @return GraphTraversal
     */
    public function values(string ...$propertyKeys): GraphTraversal
    {
        $step = new ValuesStep(...$propertyKeys);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "where" step.
     *
     * @param mixed $args being any of:
     *                    - mixed predicate
     *                    - string startKey, mixed predicate
     *                    - GraphTraversalInterface whereTraversal
     * @return GraphTraversal
     */
    public function where(...$args): GraphTraversal
    {
        $step = new WhereStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "with" step.
     *
     * @param mixed $args being any of:
     *                    - string key
     *                    - string key, mixed value
     * @return GraphTraversal
     */
    public function with(...$args): GraphTraversal
    {
        $step = new WithStep(...$args);
        $this->steps->add($step);

        return new static($this->steps);
    }

    /**
     * The "write" step.
     *
     * @return GraphTraversal
     */
    public function write(): GraphTraversal
    {
        $step = new WriteStep();
        $this->steps->add($step);

        return new static($this->steps);
    }
}
